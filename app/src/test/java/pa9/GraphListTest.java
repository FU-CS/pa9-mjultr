/*
 * This source file was generated by the Gradle 'init' task
 */
package pa9;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class GraphListTest {

    @Test
    void testAddWeightedEdge() {
        GraphList graph = new GraphList(5);
        graph.addWeightedEdge(0, 1, 10);
        graph.addWeightedEdge(1, 2, 20);
        
        // Test if the edges are added correctly
        int[] distances = graph.shortestPath(0);
        assertNotNull(distances);
        assertEquals(10, distances[1]); // Should be 10 from 0 to 1
        assertEquals(30, distances[2]); // Should be 30 from 0 to 2 (10 + 20)
    }

    @Test
    void testShortestPath() {
        GraphList graph = new GraphList(4);
        graph.addWeightedEdge(0, 1, 5);
        graph.addWeightedEdge(1, 2, 10);
        graph.addWeightedEdge(2, 3, 1);
        
        // Test shortest path from 0 to 3
        int[] distances = graph.shortestPath(0);
        assertNotNull(distances);
        assertEquals(5, distances[1]);
        assertEquals(15, distances[2]); // 5 + 10
        assertEquals(16, distances[3]); // 5 + 10 + 1
    }

    @Test
    void testMinimumSpanningTreeKruskal() {
        GraphList graph = new GraphList(5);
        graph.addWeightedEdge(0, 1, 6);
        graph.addWeightedEdge(0, 2, 7);
        graph.addWeightedEdge(1, 2, 8);
        graph.addWeightedEdge(1, 3, 5);
        graph.addWeightedEdge(2, 3, 7);
        graph.addWeightedEdge(3, 4, 9);

        int[] mst = graph.minimumSpanningTree();
        
        assertNotNull(mst);
        assertEquals(27, mst[0]); // Total MST weight should be 27
    }

    @Test
    void testMinimumSpanningTreePrim() {
        GraphList graph = new GraphList(5);
        graph.addWeightedEdge(0, 1, 6);
        graph.addWeightedEdge(0, 2, 7);
        graph.addWeightedEdge(1, 2, 8);
        graph.addWeightedEdge(1, 3, 5);
        graph.addWeightedEdge(2, 3, 7);
        graph.addWeightedEdge(3, 4, 9);

        int[] mst = graph.minimumSpanningTreePrim();

        assertNotNull(mst);
        assertEquals(27, mst[0]); // Total MST weight should be 27
    }

    @Test
    void testDisconnectedGraph() {
        GraphList graph = new GraphList(3);
        graph.addWeightedEdge(0, 1, 5);

        // Test minimum spanning tree in a disconnected graph
        int[] mst = graph.minimumSpanningTree();
        assertNull(mst); // No MST should be possible since it's disconnected
    }

    @Test
    void testNegativeWeightCycle() {
        GraphList graph = new GraphList(3);
        graph.addWeightedEdge(0, 1, 5);
        graph.addWeightedEdge(1, 2, 2);
        graph.addWeightedEdge(2, 0, -10); // Negative cycle

        // Test if Bellman-Ford detects negative cycle
        int[] distances = graph.shortestPath(0);
        assertNull(distances); // Should detect negative cycle and return null
    }
}
